name: CI & Quality Checks
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project packages
        run: poetry install --no-interaction
      - name: Check Formatting with Black
        run: poetry run black . --check

  linting:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project packages
        run: poetry install --no-interaction
      - name: Lint with Flake8
        run: poetry run flake8 .

  testing:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project packages
        run: poetry install --no-interaction
      - name: Run Unit Tests
        run: |
          # Run tests in each library/agent directory that has tests
          for test_dir in $(find . -name "tests" -type d | grep -E "(libs|agents)"); do
            project_dir=$(dirname "$test_dir")
            echo "Running tests in $project_dir"
            cd "$project_dir"
            poetry install  # Install dependencies for this library
            # Set fake environment variables for testing (no real secrets)
            export TOMORROW_IO_API_KEY="fake_api_key_for_testing"
            poetry run pytest
            cd - > /dev/null
          done

  auto-approve:
    name: Auto Approve PR
    runs-on: ubuntu-latest
    needs: [formatting, linting, testing]
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request' && (github.actor == 'davidasnider' || github.actor == 'dependabot[bot]')
    steps:
      - name: Auto approve PR
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          review-message: "Auto-approved after all checks passed"

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: auto-approve
    permissions:
      contents: write
      pull-requests: write
    if: github.event_name == 'pull_request' && (github.actor == 'davidasnider' || github.actor == 'dependabot[bot]')
    steps:
      - name: Enable auto-merge for PR
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
